; NASCOM PROGRAMMABLE GRAPHICS HANDLER FOR POLYDOS 1983, 2023 BY DOUG SEATON AND BOB EDWARDS; ALLOWS PIXEL LEVEL PLOTTING ON THE SCREEN UP TO THE LIMIT OF THE 256 PROGRAMMABLE CHARS; THE NASCOM SCREEN IS 384 PIXELS WIDE, 256 PIXELS HIGH. COORD 0,0 IS THE BOTTOM LEFT NASCOM4      EQU     1  ; SET 1 IF NASCOM4, ELSE SET 0 = NASCOM 1 TO 3CHARPERLN    EQU     48 ; GRAPHICS CHAR/LINEMAXDISPL	 EQU	 CHARPERLN*8-1VIDRAM  	 EQU	 080AHGRAPHICZERO	 EQU	 0E800H; 0D000HWSP        	 EQU	 0C92H;  ORG 0C800H  IDNT $,$	;              DB 'VGRA'SWITCH: JP INITIALISE		 JP FIXFRAME JP MOVETO JP MOVEBY JP POINTAT JP POINTBY JP LINETO JP LINEBY JP CIRCLE JP RESOURCE JP BACKGROUND;JP FIXPART;JP PUTPART;JP SPLINE;JP TEXT;JP PENCOLOUR;;CALCULATE GRAPHIC BASE IN HL FROM CHAR IN AGETBASE: LD L,A		        ; SAVE CHAR IN L LD H,0		        ; MAKE 16-BIT NO OF IT ADD HL,HL	        ; *2 ADD HL,HL	        ; *4 ADD HL,HL	        ; *8 ADD HL,HL	        ; *16 LD BC,GRAPHICZERO	 ADD HL,BC	        ; HL=GRAZERO + (16 * CHAR) RET		        ; HL POINTS TO REQD GRAPHS. BASE;;CLEAR OLD ALLOCATION OF A; LEAVE PTR IN HLCLEARCHAR: LD HL,FRAMEPOINTER	; BASE ADDR OF TABLE LD C,A		        ; C= CHAR TO CLEAR LD B,0		        ; MAKE INTO 16-BIT VALUE ADD HL,BC	        ; POINT TO REQD ENTRY OF 4 PUSH HL	        ; SAVE THIS PUSH DE LD L,(HL) LD H,2 ADD HL,HL ADD HL,HL	        ; HL=ADDR LOWEST OF 4 SCREEN LOC LD BC,4 CPIR		        ; FIND WHICH LOC IS REALLY REQD JR NZ,ENDCLEAR	    ; NOT THERE, EXIT DEC HL		        ; POINT TO WANTED LOC EX AF,AF LD A,(GROUND) LD (HL),A	        ; (GROUND) -> SCREEN LOC TO CLR EX AF,AFENDCLEAR: CALL GETBASE	    ; START OF GRAPHIC POINTED BY A EX DE,HL LD HL,(GRNDCHAR) LD BC,10H  IF NASCOM4 = 1 PUSH DE PUSH HL PUSH BC ENDIF  LDIR               ; COPY CHAR TO MAIN MEMORY  IF NASCOM4 = 1 POP BC POP HL POP DE LD A,E1H OUT (ECH),A LD A,59H OUT (18H),A LDIR               ; COPY CHAR TO CHR GEN TOO LD A,19H OUT (19H),A LD A,E0H OUT (ECH),A ENDIF  POP DE POP HL RET;;RECORD CHAR TARGET (DE) IN ALLOCATION (HL)RECORD: SRA D RR E SRA D RR E		        ; DE= DE / 4 LD (HL),E	        ; PLACE LSB IN TABLE RET;; CALCULATE TARGET SCREEN LOCATION; ON ENTRY DE=X (HORIZ) AND HL=Y (VERT); ON EXIT  HL=VIDEORAM TARGET ADDRESS; ORIGIN X=0,Y=0 IS BOTTOM LEFT CORNERGETTARGET: LD A,0EFH SUB L		        ; INVERT VERTICAL AXIS AND 0F0H	        ; MASK OFF ROW COUNT LD L,A ADD HL,HL ADD HL,HL	        ; YAXIS * 64 / 16 SRA D RR E SRA D RR E SRA D RR E		        ; XAXIS / 8 ADD HL,DE	        ; ADD TOGETHER LD DE,VIDRAM	    ; ADD TO START OF SCR ADD HL,DE RET;VECTOR: LD BC,(YVEC) LD DE,(XVEC) LD HL,(XVAL) ADD HL,DE EX DE,HL LD HL,(YVAL) ADD HL,BC LD B,H LD C,L;;PLOT A SINGLE LOCATION DEFINED BY;HORIZONTAL DISP IN DE,VERT DISP IN BCPLOTPOINT: BIT 7,D	        ; DE<0? RET NZ		        ; NO PLOT IF SO LD HL,MAXDISPL	    ; R.H. SIDE OF SCREEN OR A SBC HL,DE RET M LD H,B LD L,C XOR A ADD A,H RET NZ LD A,E AND 7 LD C,A LD A,L		        ; L = Y VALUE CPL AND 0FH	        ; A = SUB-ROW LD B,A		        ; SAVE IN B PUSH BC	        ; B = SUB-ROW,C = SUBCOLUMN                    ; HL = X VALUE,DE = Y VALUE CALL GETTARGET	    ; HL = VID RAM ADDR LD A,(ALLOCATION) DEC A CP (HL)	        ; CHAR BEEN USED THIS FRAME JP C,ORPATTERN     ; JP IF YES EX DE,HL	        ; ELSE DE= VID CHAR POS LD HL,GROUND CP (HL)	        ; IS CHAR THERE BLANK JP NZ,HOUSEKEEP    ; JP IF NOT POP BC		        ; CLEAN UP STACK RET		        ; EXIT;HOUSEKEEP: LD (ALLOCATION),A CALL CLEARCHAR	    ; CLEAR CHAR AT THIS LOCATION LD (DE),A	        ; PUT CHAR ONTO SCREEN CALL RECORD	    ; A IS SAVED IN TABLE? JP ORPAT2	        ; GO SET REQD BIT;;MASK PATTERN FOR BIT POSITIONMASK: DB 80H DB 40H DB 20H DB 10H DB 08H DB 04H DB 02H DB 01H;;SET REQUIRED BIT IN CHARACTER AT (HL)ORPATTERN: LD A,(HL)ORPAT2: CALL GETBASE	    ; BASE ADDR IN HL FROM A POP BC		        ; B = SUB-ROW,C = SUB-COLUMN LD E,B LD B,0		        ; BC = SUB-COLUMN LD D,0		        ; DE = SUB-ROW ADD HL,DE	        ; ADD TO BASE ADDR EX DE,HL	        ; DE = REQD BYTE ADDR LD HL,MASK	        ; HL POINTS TO MASK TABLE ADD HL,BC	        ; POINT TO REQD MASK LD A,(DE)	        ; A = REQD MASK OR (HL)	        ; OR INTO REQD CHAR BYTE LD (DE),A  IF NASCOM4 = 1 PUSH AF LD A,E1H OUT (ECH),A LD A,59H OUT (18H),A POP AF LD (DE),A          ; AND WRITE TO CHAR GEN RAM TOO LD A,19H OUT (19H),A LD A,E0H OUT (ECH),A ENDIF   RET		        ; EXIT TO PASCAL;;; LINE DRAW ROUTINE; DRAWS LINE FROM XVAL,YVAL TO XFIN,YFIN; ENTRY:; DE = XVAL BC = YVAL; HL' = CELL DE' = XSIZE BC' = YSIZE; IX POINTS TO XVAL INCR OR DECR ROUTINE; IY POINTS TO YVAL INCR OR DECR ROUTINE; PLOTLINE: LD IX,XINC	        ; SET XINC =1 YINC=1 LD IY,YDEC PUSH DE PUSH BC EXX LD HL,(YVAL)	    ; END POINT POP DE		        ; START POINT OR A SBC HL,DE	        ; HL = YSIZE JP M LINE1	        ; JP IF YSIZE -VE LD IY,YINC	        ; IF YSIZE +VE THEN YINC = 1 ADD HL,DE	        ; RESTORE HL EX DE,HL	        ; SWAP START & FINISH OR A SBC HL,DE	        ; & YSIZE = -YSIZELINE1: LD B,H LD C,L LD HL,(XVAL) POP DE OR A SBC HL,DE	        ; HL' = XSIZE JP P LINE2	        ; JP IF +VE LD IX,XDEC	        ; ELSE XINC=-1 ADD HL,DE EX DE,HL OR A SBC HL,DE	        ; & XSIZE = -XSIZELINE2: LD E,L		        ; HL',DE' = XSIZE LD D,H OR A SBC HL,BC	        ; XSIZE+YSIZE PUSH HL	        ; SAVE THIS SRA H RR L		        ; HL' = CELL ADC HL,BC	        ;(XSIZE-YSIZE)/2 EXXLINE3: POP HL		        ; XSIZE+YSIZE EXX		        ; HL' = CELL DE' = XSIZE BC' = YSIZE BIT 7,H	        ; IS CELL >= 0 JR NZ LINE6	    ; JP IF -VE ADD HL,BC	        ; ELSE CELL=CELL - YSIZE EXX DEC HL		        ; DEC XSIZE+YSIZE VALUE JP (IX)	        ; GO CHANGE XVAL BY 1;XINC: INC DE		        ; XVAL=XVAL+1 JP LINE5XDEC: DEC DE		        ; XVAL = XVAL-1LINE5:		        ; RETURN FROM XVAL CHANGE JP P LINE7	        ; JP IF CELL >= 0 EXXLINE6: ADD HL,DE	        ; ELSE CELL = CELL + XSIZE EXX DEC HL		        ; DEC XSIZE+YSIZE VALUE JP (IY)	        ; & CHANGE YVAL BY 1;YINC: INC BC		        ; YVAL = YVAL+1 JP LINE7YDEC: DEC BC		        ; YVAL = YVAL-1LINE7:		        ; RETURN FROM YVAL CHANGE BIT 7,H	        ; IS XSIZE+YSIZE < 0 RET NZ		        ; EXIT IF FINISHED PUSH HL PUSH DE	        ; SAVE XVAL PUSH BC	        ; SAVE YVAL CALL PLOTPOINT	    ; PLOT NEXT POINT POP BC		        ; RESTORE XVAL,YVAL POP DE JP LINE3	        ; GO CHECK FOR ENDPOINT;;WIPE: LD A,(GROUND) LD B,10H	        ; NO. OF LINES LD DE,40H	        ; 64 CHARS/LINE (WITH MARGINS) LD HL,VIDRAM	    ; LINE1 CURSOR HOME POSITIONWIPE1: PUSH HL	        ; SAVE START OF LINE PUSH BC	        ; SAVE LINE COUNT LD B,CHARPERLN	    ; NO. OF GRAPHICS/LINEWIPE2: LD (HL),A	        ; GRNDCHAR TO SCREEN INC HL DJNZ WIPE2	        ; FOR ALL ON LINE POP BC POP HL ADD HL,DE	        ; NEXT START OF LINE DJNZ WIPE1	        ; FOR ALL 16 LINES RET;PLOTCIRCLE: LD BC,0	        ; Y = 0 PUSH DE	        ; X = RADIUS EXX POP DE LD HL,1 OR A SBC HL,DE OR A SBC HL,DE RET P EX DE,HL	        ; V IN DE',INITIALLY 1-2R ADD HL,DE	        ; e IN HL',INITIALLY 1-R LD BC,1	        ; V IN BC',INITIALLY 1 EXXCIRC1: LD HL,0	        ; ON 1ST PASS,ALSO TESTS R>=0 ADD HL,DE OR A SBC HL,BC	        ; X - Y RET M		        ; RET WHEN Y > X, 1/8 ALL PLOTTEDCIRC2: LD (XVEC),DE	    ; SAVE X,Y DURING PLOTPOINT LD (YVEC),BC CALL VECTOR LD HL,0 LD BC,(YVEC) OR A SBC HL,BC LD (YVEC),HL	    ; Y = -Y CALL VECTOR LD HL,0 LD DE,(XVEC) OR A SBC HL,DE LD (XVEC),HL	    ; X = -X CALL VECTOR LD HL,0 LD BC,(YVEC) OR A SBC HL,BC LD (YVEC),HL	    ; Y = -Y CALL VECTOR LD BC,(XVEC) LD DE,(YVEC)	    ; SWAP X & Y BIT 7,D JP Z CIRC2	        ; X > 0 REPEAT (ONCE) LD HL,0	        ; ELSE EXIT WITH OR A		        ; X = -ORIGINAL X SBC HL,DE	        ; Y = -ORIGINAL Y EX DE,HL	        ; RESTORE ORIGINAL X LD HL,0 OR A SBC HL,BC LD B,H LD C,L INC BC		        ; Y = Y+1 EXX INC DE INC DE		        ; V = V+2 (=1+2Y-2X) INC BC INC BC		        ; U = U+2 (=1+2Y) BIT 7,H JP NZ CIRC3	    ; JP IF e<0 INC DE INC DE ADD HL,DE	        ; IF e >= 0 THEN EXX		        ; U = U+2 V = V+4 e = e+V DEC DE		        ; X = X-1 JP CIRC1CIRC3: ADD HL,BC	        ; ELSE EXX		        ; U = U+2 V = V+2 e = e+U JP CIRC1	        ; X LEFT AT PREVIOUS VALUE;INITIALISE: LD A,(GROUND) CALL GETBASE LD (GRNDCHAR),HL LD DE,(GRNDPAT) LD B,8INIT1: LD (HL),E INC HL LD (HL),D INC HL DJNZ INIT1 CALL WIPE CALL FIXFRAME;;; START OF ACCESSIBLE ROUTINES; REQUIRED PASCAL DECLARATION GIVEN AS COMMENT; note that declarations must include EXTERNAL; followed by switch address of routine;;             PROCEDURE FIXFRAME;FIXFRAME: LD A,(ALLOCATION)  ; LAST CHAR USEDLOOP: DEC A		        ; SKIP OVER LAST CHAR	 LD HL,GROUND CP (HL)	        ; IS THIS LAST CHAR USABLE JP Z,ENDFIX	    ; JP IF YES CALL CLEARCHAR     ; ELSE CLEAR THIS CHAR LD (HL),0	        ; CLEAR ALLOCATION JP LOOPENDFIX: LD A,0 LD (ALLOCATION),A	; ALLOCATION = 0 RET;;     PROCEDURE MOVEBY(X,Y:INTEGER); BC = YVAL, DE = XVAL & THEN XVAL,YVAL MOVEDMOVEBY: LD IX,(WSP)        ; POINT TO PARAMS LD L,(IX-4) LD H,(IX-3)	    ; HL = XAXIS DISPLACEMENT LD DE,(XVAL) ADD HL,DE LD (XVAL),HL	    ; XVAL = X AXIS + DISP. LD L,(IX-2) LD H,(IX-1)	    ; HL = YAXIS DISPLACEMENT LD BC,(YVAL) ADD HL,BC	        ; ADD TO Y POSITION LD (YVAL),HL	    ; & STORE AT YVAL RET;;     PROCEDURE MOVETO(X,Y:INTEGER);; SETS XVAL,YVAL & BC=YVAL,DE=XVAL ON RETURNMOVETO: LD IX,(WSP)	    ; PT. TO PARAMETERS LD L,(IX-4) LD H,(IX-3) LD DE,(XVAL)	    ; XVAL = X POSITION LD (XVAL),HL LD L,(IX-2) LD H,(IX-1) LD BC,(YVAL)	    ; YVAL = Y POSITION LD (YVAL),HL RET;;    PROCEDURE POINTBY(X,Y:INTEGER)POINTBY: CALL MOVEBY	    ; OFFSET XVAL,YVAL JP PTAT1	        ; & PLOT POINT;;  PROCEDURE POINTAT(X,Y:INTEGER)POINTAT: CALL MOVETO	    ; PARAMS -> XVAL,YVALPTAT1: LD DE,(XVAL) LD BC,(YVAL) JP PLOTPOINT;;	PROCEDURE LINEBY(X,Y:INTEGER)LINEBY: CALL MOVEBY JP PLOTLINE;;	PROCEDURE LINETO(X,Y:INTEGER)LINETO: CALL MOVETO JP PLOTLINE;;	PROCEDURE CIRCLE(RADIUS:INTEGER);CIRCLE:  LD IX,(WSP) LD E,(IX-2) LD D,(IX-1) JP PLOTCIRCLE;;	FUNCTION RESOURCE:INTEGER;RESOURCE: LD HL,(ALLOCATION) LD A,L DEC A SUB H              ; GROUND - ALLOCATION LD IX,(WSP) LD (IX-2),A XOR A LD (IX-1),A RET;;	PROCEDURE BACKGROUND(GRNDPAT:INTEGER);BACKGROUND: LD IX,(WSP) LD E,(IX-2) LD D,(IX-1) LD (GRNDPAT),DE JP INITIALISE;;WORKSPACE AREAXVAL          DW 0YVAL          DW 0XVEC          DW 0YVEC          DW 0ALLOCATION    DB 00HGROUND        DB 080HGRNDPAT	      DW 0HGRNDCHAR      DW 0F000HFRAMEPOINTER  DS 100H;